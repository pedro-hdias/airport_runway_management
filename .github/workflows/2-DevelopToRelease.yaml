name: Release Creation Workflow

on:
  pull_request:
    types: [closed]
    branches:
      - develop  # Aciona o workflow quando um PR para develop Ã© fechado

jobs:
  create_release:
    if: github.event.pull_request.merged == true  # Apenas continua se o PR foi mergeado
    runs-on: ubuntu-latest

    steps:
      # Checkout the develop branch
      - name: Checkout develop branch
        uses: actions/checkout@v2
        with:
          ref: develop
          fetch-depth: 0  # Garante que todas as tags sejam baixadas

      # Get the latest tag
      - name: Get Latest Tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.0.0")
          clean_tag=${latest_tag#v}  # Remove o prefixo 'v' da tag
          echo "LATEST_TAG=$clean_tag" >> $GITHUB_ENV

      # Get the label from the merged PR
      - name: Get PR Label
        id: get_label
        run: |
          label=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name')
          echo "PR_LABEL=$label" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Check for an existing PR from develop to release
      - name: Check for existing PR from develop to release
        id: check_pr
        run: |
          pr_exists=$(gh pr list --base release-v${{ env.LATEST_TAG }} --head develop --state open --json number --jq '.[0].number')
          if [[ -z "$pr_exists" ]]; then
            echo "No PR found. Creating a new one."
            echo "create_pr=true" >> $GITHUB_ENV
          else
            echo "PR already exists: #$pr_exists"
            echo "create_pr=false" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Only continue if no PR exists
      - name: Proceed if no PR exists
        if: env.create_pr == 'true'
        run: echo "Proceeding with release creation"

      # Calculate the next version based on the label
      - name: Calculate Next Version
        if: env.create_pr == 'true'
        id: calculate_version
        run: |
          IFS='.' read -r major minor patch <<< "${{ env.LATEST_TAG }}"
          if [[ "${{ env.PR_LABEL }}" == "patch" ]]; then
            next_patch=$((patch + 1))
            next_version="$major.$minor.$next_patch"
          elif [[ "${{ env.PR_LABEL }}" == "minor" ]]; then
            next_minor=$((minor + 1))
            next_version="$major.$next_minor.0"
          elif [[ "${{ env.PR_LABEL }}" == "major" ]]; then
            next_major=$((major + 1))
            next_version="$next_major.0.0"
          fi
          echo "NEXT_VERSION=$next_version" >> $GITHUB_ENV

      # Create a new release branch and tag if no PR exists
      - name: Create Release and Tag
        if: env.create_pr == 'true'
        run: |
          git checkout main
          git checkout -b release-v${{ env.NEXT_VERSION }}
          git push origin release-v${{ env.NEXT_VERSION }}
          gh release create "v${{ env.NEXT_VERSION }}" --title "Release v${{ env.NEXT_VERSION }}" --notes "Automatic release based on merged PR"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Create Pull Request from develop to release
      - name: Create Pull Request from develop to release
        if: env.create_pr == 'true'
        run: |
          gh pr create \
            --head develop \
            --base release-v${{ env.NEXT_VERSION }} \
            --title "Merge Develop into Release v${{ env.NEXT_VERSION }}" \
            --body "This PR merges the develop branch into release-v${{ env.NEXT_VERSION }}." \
            --label "release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
